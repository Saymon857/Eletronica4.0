#define TRIG_PIN 5   // Pino do Trigger do sensor ultrassônico
#define ECHO_PIN 6   // Pino do Echo do sensor ultrassônico

#define LED_VERDE 2   // Pino do LED verde
#define LED_AMARELO 3 // Pino do LED amarelo
#define LED_VERMELHO 4 // Pino do LED vermelho

long duracao;
int distancia;

void setup() {
  // Configurando os pinos do sensor ultrassônico
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Configurando os pinos dos LEDs
  pinMode(LED_VERDE, OUTPUT);
  pinMode(LED_AMARELO, OUTPUT);
  pinMode(LED_VERMELHO, OUTPUT);

  // Iniciando a comunicação serial para debug
  Serial.begin(9600);
}

void loop() {
  // Enviando um pulso de 10µs no Trigger para iniciar a medição
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Calculando o tempo de resposta do Echo
  duracao = pulseIn(ECHO_PIN, HIGH);

  // Calculando a distância em centímetros (velocidade do som = 343 m/s)
  distancia = duracao * 0.034 / 2;

  // Exibindo a distância medida no monitor serial
  Serial.print("Distancia: ");
  Serial.print(distancia);
  Serial.println(" cm");

  // Definindo o estado dos LEDs com base na distância
  if (distancia < 15) {
    // Verde: Distância menor que 15 cm
    digitalWrite(LED_VERDE, HIGH);
    digitalWrite(LED_AMARELO, LOW);
    digitalWrite(LED_VERMELHO, LOW);
  } 
  else if (distancia >= 15 && distancia < 30) {
    // Amarelo: Distância entre 15 cm e 30 cm
    digitalWrite(LED_VERDE, LOW);
    digitalWrite(LED_AMARELO, HIGH);
    digitalWrite(LED_VERMELHO, LOW);
  } 
  else {
    // Vermelho: Distância maior que 30 cm
    digitalWrite(LED_VERDE, LOW);
    digitalWrite(LED_AMARELO, LOW);
    digitalWrite(LED_VERMELHO, HIGH);
  }

  // Atraso de 500ms antes de fazer a próxima leitura
  delay(500);
}
//
#include <DHT.h>
#include <LiquidCrystal.h>

// Configurações do sensor DHT11
#define DHTPIN 8      // Pino onde o DHT está conectado (agora no pino 8)
#define DHTTYPE DHT11 // Definindo o tipo de sensor

DHT dht(DHTPIN, DHTTYPE);

// Configurações do LCD (pinos de controle RS, E, D4, D5, D6, D7)
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);

// Definindo o pino do potenciômetro (ligado a um pino analógico)
int potPin = A0;

void setup() {
  // Inicializando o LCD
  lcd.begin(16, 2);  // Definindo LCD com 16 colunas e 2 linhas
  lcd.print("Iniciando...");

  // Inicializando o sensor DHT11
  dht.begin();
  
  delay(2000);  // Pequena pausa para inicialização
}

void loop() {
  // Lendo a posição do potenciômetro para ajustar o contraste
  int potValue = analogRead(potPin);  // Lê o valor do potenciômetro (0-1023)
  int contraste = map(potValue, 0, 1023, 0, 255);  // Mapeia o valor para o ajuste de contraste
  
  // Envia o valor do contraste para o pino VO do LCD (geralmente conectado via potenciômetro)
  analogWrite(potPin, contraste);

  // Leitura da temperatura e umidade do sensor DHT11
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Verificando se a leitura é válida
  if (isnan(humidity) || isnan(temperature)) {
    lcd.clear();
    lcd.print("Erro leitura");
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.print(temperature);
    lcd.print("C");
    
    lcd.setCursor(0, 1);
    lcd.print("Umid: ");
    lcd.print(humidity);
    lcd.print("%");
  }

  delay(2000);  // Atualiza a cada 2 segundos
}
//
#include <LiquidCrystal.h>

// Definindo os pinos do LCD
LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // RS, EN, D4, D5, D6, D7

// Definindo os pinos do sensor
const int triggerPin = 9; // Pino de Trigger
const int echoPin = 10;   // Pino de Echo

// Definindo a distância máxima do sensor (500 cm)
const long maxDistance = 500; // Máxima distância em cm

void setup() {
  Serial.begin(9600);           // Inicia a comunicação serial
  pinMode(triggerPin, OUTPUT);  // Define o trigger como saída
  pinMode(echoPin, INPUT);      // Define o echo como entrada

  // Inicializa o LCD
  lcd.begin(16, 2); // 16 colunas e 2 linhas
   lcd.print(">>>>>> ** <<<<<< ");
  delay(1000); // Exibe a mensagem inicial por 1 segundo
  lcd.clear(); // Limpa o display
}

void loop() {
  // Limpa o trigger
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);

  // Envia um pulso de 10 microssegundos
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);

  // Lê o tempo de duração do pulso no echo
  long duration = pulseIn(echoPin, HIGH);

  // Calcula a distância em cm (com limite máximo de 500 cm)
  long distance = duration * 0.034 / 2; // Velocidade do som: 343 m/s

  if (distance > maxDistance) {
    distance = maxDistance; // Limita a distância máxima a 500 cm
  }

  // Exibe a distância no monitor serial
  Serial.print("Dist: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Atualiza o LCD
  lcd.clear();              // Limpa o display antes de atualizar a mensagem
  lcd.setCursor(0, 0);      // Muda para a primeira linha

  // Condições para as diferentes faixas de distância
  if (distance < 15) {
    lcd.print("   >>> ** <<<");     // Mensagem para distâncias menores que 15 cm
    lcd.setCursor(0, 1);     // Linha 2 do LCD
    lcd.print("     Perto");
  } 
  else if (distance >= 15 && distance < 30) {
    lcd.print(" >>>>> ** <<<<<");   // Mensagem para distâncias entre 15 e 30 cm
    lcd.setCursor(0, 1);     // Linha 2 do LCD
    lcd.print("    Proximo");
  } 
  else {
    lcd.print(">>>>>> ** <<<<<<"); // Mensagem para distâncias maiores que 30 cm
    lcd.setCursor(0, 1);     // Linha 2 do LCD
    lcd.print("      Longe");
  }

  delay(1000); // Espera 1 segundo antes da próxima leitura
}

