6.1
#include <stdio.h>
#include <math.h>

int main() {
    double angulo_graus, seno;
    
    printf("Digite um ângulo em graus: ");
    scanf("%lf", &angulo_graus);
    
    seno = sin(angulo_graus * M_PI / 180.0);
    
    printf("O seno de %.2f graus é %.4f\n", angulo_graus, seno);
    
    return 0;
}
6.2
#include <stdio.h>
#include <math.h>

int main() {
    double seno;
    
    printf("Ângulo (graus) | Seno\n");
    printf("-----------------------\n");
    
    for (int angulo = 0; angulo <= 360; angulo += 30) {
        seno = sin(angulo * M_PI / 180.0);
        printf("%15d | %.4f\n", angulo, seno);
    }
    
    return 0;
}
6.3
#include <stdio.h>
#include <math.h>

int main() {
    double numero, raiz_quadrada;
    
    printf("Digite um número: ");
    scanf("%lf", &numero);
    
    raiz_quadrada = sqrt(numero);
    
    printf("A raiz quadrada de %.2f é %.4f\n", numero, raiz_quadrada);
    
    return 0;
}
6.4
#include <stdio.h>
#include <math.h>

int main() {
    double a, b, c, angulo;
    
    printf("Digite o comprimento do lado a: ");
    scanf("%lf", &a);
    printf("Digite o comprimento do lado b: ");
    scanf("%lf", &b);
    
    c = sqrt(a * a + b * b);
    angulo = atan2(b, a) * (180.0 / M_PI);
    
    printf("%.2f %d°\n", c, (int)round(angulo));
    
    return 0;
}
6.5
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int numero_secreto, palpite, tentativas = 0;
    
    srand(time(NULL));
    numero_secreto = rand() % 100 + 1;
    
    while (1) {
        printf("Digite seu palpite (1 a 100): ");
        scanf("%d", &palpite);
        tentativas++;
        
        if (palpite < numero_secreto) {
            printf("Muito baixo!\n");
        } else if (palpite > numero_secreto) {
            printf("Muito alto!\n");
        } else {
            printf("Parabéns! Você acertou o número secreto %d em %d tentativas.\n", numero_secreto, tentativas);
            break;
        }
    }
    
    return 0;
}
6.6
#include <stdio.h>

double calcular_y(double x) {
    return 2 * x * x + 2 * x - 3;
}

int main() {
    double x, y;
    
    printf(" x    |    y\n");
    printf("-------------\n");
    
    for (x = -5.0; x <= 5.0; x += 0.5) {
        y = calcular_y(x);
        printf("%.1f | %.2f\n", x, y);
    }
    
    return 0;
}
6.7
#include <stdio.h>

// Função para imprimir uma linha com caracteres específicos
void printline(int number, char c) {
    for (int i = 0; i < number; i++) {
        putchar(c);
    }
    putchar('\n');
}

int main() {
    // Exemplo de uso da função printline
    printline(40, '*');
    
    return 0;
}
6.8
#include <stdio.h>

// Declaração da função
int readnumber(void);

int main(void) {
    int number;
    number = readnumber();
    printf("O número lido é %d\n", number);
    return 0;
}

// Definição da função
int readnumber(void) {
    int num;
    do {
        printf("Digite um número entre 0 e 10: ");
        scanf("%d", &num);
        if (num < 0 || num > 10) {
            printf("Número inválido. Tente novamente.\n");
        }
    } while (num < 0 || num > 10);
    return num;
}
6.9
#include <stdio.h>

// Declaração da função
int readnumber(int lower_boundary, int upper_boundary);

int main(void) {
    int number;
    
    // Chama a função readnumber com o intervalo desejado e imprime o resultado
    number = readnumber(0, 10); // Exemplo de intervalo [0, 10]
    printf("O número lido é %d\n", number);
    
    return 0;
}

// Definição da função readnumber
int readnumber(int lower_boundary, int upper_boundary) {
    int num;
    // Solicita um número até que esteja dentro do intervalo válido
    do {
        printf("Digite um número entre %d e %d: ", lower_boundary, upper_boundary);
        scanf("%d", &num);
        if (num < lower_boundary || num > upper_boundary) {
            printf("Número inválido. Tente novamente.\n");
        }
    } while (num < lower_boundary || num > upper_boundary);
    
    return num;
}
6.10
#include <stdio.h>

double exponentiation(double base, int exponent);

int main(void) {
    double base;
    int exponent;
    
    printf("Digite a base: ");
    scanf("%lf", &base);
    
    printf("Digite o expoente: ");
    scanf("%d", &exponent);
    
    double resultado = exponentiation(base, exponent);
    printf("%.2f ^ %d = %.2f\n", base, exponent, resultado);
    
    return 0;
}

double exponentiation(double base, int exponent) {
    double resultado = 1.0;
    
    if (exponent < 0) {
        base = 1 / base;
        exponent = -exponent;
    }
    
    for (int i = 0; i < exponent; i++) {
        resultado *= base;
    }
    
    return resultado;
}
6.11
#include <stdio.h>

int gcd(int number1, int number2);

int main(void) {
    int a, b, c;
    
    printf("Digite o primeiro número: ");
    scanf("%d", &a);
    
    printf("Digite o segundo número: ");
    scanf("%d", &b);
    
    printf("Digite o terceiro número: ");
    scanf("%d", &c);
    
    int mdc_ab = gcd(a, b);
    int mdc_abc = gcd(mdc_ab, c);
    
    printf("O maior divisor comum dos números %d, %d e %d é %d\n", a, b, c, mdc_abc);
    
    return 0;
}


int gcd(int number1, int number2) {
    while (number2 != 0) {
        int temp = number2;
        number2 = number1 % number2;
        number1 = temp;
    }
    return number1;
}
6.12
#include <stdio.h>

void draw_bar(int score, char symbol);

int main(void) {
    int score;
    char symbol;
    
    printf("Digite as pontuações (um número negativo para encerrar): ");
    
    while (1) {
        scanf("%d", &score);
        if (score < 0) {
            break; 
        }
        
        if (score >= 0) {
            printf("Que símbolo você gostaria de usar? ");
            scanf(" %c", &symbol); 
            
            printf("pontuação = %d ", score);
            draw_bar(score, symbol);
            printf("\n");
        }
    }
    
    return 0;
}

void draw_bar(int score, char symbol) {
    for (int i = 0; i < score; i++) {
        putchar(symbol);
    }
}
6.13
#include <stdio.h>

// Declaração das funções
void hello(void);
void sum(int num1, int num2);
void goodbye(void);

int main(void) {
    int num1, num2;
    
    hello(); 
    
    // Loop para processar 5 somas
    for (int i = 0; i < 5; i++) {
        printf("Digite 2 números < 100: ");
        scanf("%d %d", &num1, &num2);
        
        if (num1 >= 100 || num2 >= 100) {
            printf("Os números devem ser menores que 100.\n");
            i--; 
            continue;
        }
        
        sum(num1, num2);
    }
    
    goodbye(); 
    
    return 0;
}

void hello(void) {
    printf("Bem-vindo, este programa pedirá que você resolva 5 somas.\n");
}

void sum(int num1, int num2) {
    int user_sum, correct_sum;
    
    correct_sum = num1 + num2;
    
    printf("Qual é a soma de %d e %d? ", num1, num2);
    scanf("%d", &user_sum);
    
    if (user_sum == correct_sum) {
        printf("Segundo você, a soma de %d e %d é %d. Isso está correto.\n", num1, num2, user_sum);
    } else {
        printf("Segundo você, a soma de %d e %d é %d. Isso está incorreto.\n", num1, num2, user_sum);
    }
}

void goodbye(void) {
    printf("Obrigado pela sua cooperação.\n");
}
6.14
#include <stdio.h>

// Declaração das funções
int isLeapYear(int year);
int numberOfDays(int month, int year);

int main(void) {
    int month, year;
    
    // Leitura do mês e ano
    printf("Digite o mês e o ano: ");
    scanf("%d %d", &month, &year);
    
    // Validação do mês
    if (month < 1 || month > 12) {
        printf("Mês inválido.\n");
        return 1;
    }
    
    int days = numberOfDays(month, year);
    printf("Mês %d de %d tem %d dias\n", month, year, days);
    
    return 0;
}

int isLeapYear(int year) {
    if (year % 400 == 0) {
        return 1; // Ano bissexto
    } else if (year % 100 == 0) {
        return 0; // Não é bissexto
    } else if (year % 4 == 0) {
        return 1; // Ano bissexto
    } else {
        return 0; // Não é bissexto
    }
}

int numberOfDays(int month, int year) {
    switch (month) {
        case 4: case 6: case 9: case 11:
            return 30;
        case 2:
            return isLeapYear(year) ? 29 : 28;
        default:
            return 31;
    }
}

6.15
#include <stdio.h>

// Declaração das funções
double calculateFactor(int day, int month, int year);
double calculateDaysDifference(int day1, int month1, int year1, int day2, int month2, int year2);

int main(void) {
    int day1, month1, year1;
    int day2, month2, year2;
    
    // Leitura das duas datas
    printf("Digite a primeira data (dia mês ano): ");
    scanf("%d %d %d", &day1, &month1, &year1);
    
    printf("Digite a segunda data (dia mês ano): ");
    scanf("%d %d %d", &day2, &month2, &year2);
    
    double daysDifference = calculateDaysDifference(day1, month1, year1, day2, month2, year2);
    printf("Número de dias entre as duas datas: %.0f\n", daysDifference);
    
    return 0;
}

// Função para calcular o fator de uma data
double calculateFactor(int day, int month, int year) {
    double factor;
    if (month == 1 || month == 2) {
        factor = 365 * year + day + 31 * (month - 1) + (year - 1) / 4 - ((year - 1) / 100 + 1) * 3 / 4;
    } else {
        factor = 365 * year + day + 31 * (month - 1) - (0.4 * month + 2.3) + year / 4 - (year / 100 + 1) * 3 / 4;
    }
    return factor;
}

// Função para calcular a diferença de dias entre duas datas
double calculateDaysDifference(int day1, int month1, int year1, int day2, int month2, int year2) {
    double factor1 = calculateFactor(day1, month1, year1);
    double factor2 = calculateFactor(day2, month2, year2);
    return factor2 - factor1;
}
6.16
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

// Função para gerar pontos aleatórios e calcular a estimativa de pi
double estimate_pi(int num_points) {
    int inside_circle = 0;
    
    for (int i = 0; i < num_points; i++) {
        // Gerar coordenadas aleatórias (x, y) no intervalo [0, 1]
        double x = (double)rand() / RAND_MAX;
        double y = (double)rand() / RAND_MAX;
        
        // Verificar se o ponto está dentro do círculo (x² + y² < 1)
        if (x * x + y * y < 1.0) {
            inside_circle++;
        }
    }
    
    // Estimar pi
    return 4.0 * inside_circle / num_points;
}

int main(void) {
    // Inicializa o gerador de números aleatórios
    srand(time(NULL));
    
    // Número de pontos a serem gerados
    int num_points = 100000;
    
    // Calcula a estimativa de pi
    double pi_estimate = estimate_pi(num_points);
    
    // Imprime o resultado
    printf("Estimativa de pi com %d pontos: %.6f\n", num_points, pi_estimate);
    
    return 0;
}
6.17
#include <stdio.h>

// Função para desenhar um quadrado vazio
void empty_square(int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (i == 0 || i == size - 1 || j == 0 || j == size - 1) {
                printf("*");
            } else {
                printf(" ");
            }
        }
        printf("\n");
    }
}

// Função para desenhar um quadrado preenchido
void filled_square(int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("*");
        }
        printf("\n");
    }
}

int main(void) {
    int option, size;
    
    while (1) {
        // Exibe o menu de opções
        printf("Escolha uma opção:\n");
        printf("1. Desenhar um quadrado vazio\n");
        printf("2. Desenhar um quadrado preenchido\n");
        printf("3. Parar\n");
        scanf("%d", &option);
        
        // Verifica a opção escolhida
        if (option == 3) {
            printf("Programa encerrado.\n");
            break; // Sai do loop
        }
        
        // Solicita o tamanho do quadrado
        printf("Digite o tamanho do quadrado: ");
        scanf("%d", &size);
        
        // Verifica qual quadrado desenhar
        if (option == 1) {
            empty_square(size);
        } else if (option == 2) {
            filled_square(size);
        } else {
            printf("Opção inválida!\n");
        }
        
        printf("\n"); // Adiciona uma linha em branco após o quadrado
    }

    return 0;
}
//
