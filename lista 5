7.1
#include <stdio.h>

int main(void) {
    int temperature[7]; 
    int i;
    float sum = 0, average;

    for (i = 0; i < 7; i++) {
        printf("Digite a temperatura para o dia %d: ", i);
        scanf("%d", &temperature[i]);
        sum += temperature[i]; 
    }

    average = sum / 7.0;

    printf("A temperatura média para esta semana é %.2f\n", average);

    return 0;
}
7.2
#include <stdio.h>

int main(void) {
    int temperature[7]; // Array para armazenar as temperaturas da semana
    int i;
    float sum = 0, average;

    // Ler as temperaturas para os 7 dias da semana
    for (i = 0; i < 7; i++) {
        printf("Digite a temperatura para o dia %d: ", i);
        scanf("%d", &temperature[i]);
        sum += temperature[i]; // Soma as temperaturas
    }

    // Calcula a média
    average = sum / 7.0;

    // Imprime a média
    printf("A temperatura média para esta semana é %.2f\n", average);

    // Imprime os dias com temperatura superior a 10°C
    printf("Todos os dias com temperatura > 10°C:\n");
    for (i = 0; i < 7; i++) {
        if (temperature[i] > 10) {
            printf("dia %02d\n", i);
        }
    }

    return 0;
}
7.3
#include <stdio.h>

// Função para ler as temperaturas da semana
void ReadTemp(int temperature[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite a temperatura para o dia %d: ", i);
        scanf("%d", &temperature[i]);
    }
}

// Função para calcular a média das temperaturas
float CalculateAverage(int temperature[], int size) {
    float sum = 0;
    for (int i = 0; i < size; i++) {
        sum += temperature[i];
    }
    return sum / size;
}

int main(void) {
    int temperature[7];
    float average;

    // Ler as temperaturas usando a função ReadTemp
    ReadTemp(temperature, 7);

    // Calcular a média usando a função CalculateAverage
    average = CalculateAverage(temperature, 7);

    // Imprimir a média
    printf("A temperatura média para esta semana é %.2f\n", average);

    return 0;
}
7.4
#include <stdio.h>

// Função para ler as temperaturas da semana
void ReadTemp(int temperature[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite a temperatura para o dia %d: ", i);
        scanf("%d", &temperature[i]);
    }
}

// Função para calcular quais dias têm temperatura acima de um limite
void Calculate(int temperature[], int size, int limit, int hotter_days[]) {
    for (int i = 0; i < size; i++) {
        if (temperature[i] > limit) {
            hotter_days[i] = 1; // Marca o dia como mais quente
        } else {
            hotter_days[i] = 0; // Marca o dia como não mais quente
        }
    }
}

// Função para imprimir os dias com temperaturas acima do limite
void PrintDays(int hotter_days[], int size) {
    printf("Todos os dias com temperatura superior ao limite:\n");
    for (int i = 0; i < size; i++) {
        if (hotter_days[i] == 1) {
            printf("dia %02d\n", i);
        }
    }
}

int main(void) {
    int temperature[7];
    int hotter_days[7]; // Array para armazenar os dias mais quentes
    int limit;

    // Ler as temperaturas
    ReadTemp(temperature, 7);

    // Solicitar o limite de temperatura ao usuário
    printf("Digite o limite de temperatura: ");
    scanf("%d", &limit);

    // Calcular quais dias estão acima do limite
    Calculate(temperature, 7, limit, hotter_days);

    // Imprimir os dias encontrados
    PrintDays(hotter_days, 7);

    return 0;
}
7.5
#include <stdio.h>
#define SIZE 12       // Define o tamanho do array
#define COLUMNS 3     // Define o número de colunas da matriz

// Função para ler os números no array
void ReadArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite o número %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

// Função para imprimir os números no formato de matriz
void PrintMatrix(int arr[], int size, int columns) {
    for (int i = 0; i < size; i++) {
        printf("%d\t", arr[i]);
        // Quebra de linha após cada conjunto de "columns" números
        if ((i + 1) % columns == 0) {
            printf("\n");
        }
    }
}

int main(void) {
    int a[SIZE];  // Declaração do array de tamanho SIZE
    
    // Chama a função para ler os números no array
    ReadArray(a, SIZE);
    
    // Chama a função para imprimir os números em formato de matriz
    PrintMatrix(a, SIZE, COLUMNS);
    
    return 0;
}
7.6
#include <stdio.h>
#define SIZE 12       // Define o tamanho do array
#define COLUMNS 3     // Define o número de colunas da matriz

// Função para ler os números no array
void ReadArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite o número %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

// Função para imprimir a matriz com a soma de cada linha
void PrintMatrixWithRowSum(int arr[], int size, int columns) {
    for (int i = 0; i < size; i++) {
        int row_sum = 0;  // Inicializa a soma da linha
        
        // Imprime os elementos da linha
        for (int j = 0; j < columns; j++) {
            printf("%d\t", arr[i + j]);
            row_sum += arr[i + j];  // Soma o valor ao total da linha
        }
        
        printf("| Soma da linha: %d\n", row_sum);  // Imprime a soma da linha
        
        i += (columns - 1);  // Avança para a próxima linha
    }
}

int main(void) {
    int a[SIZE];  // Declaração do array de tamanho SIZE
    
    // Chama a função para ler os números no array
    ReadArray(a, SIZE);
    
    // Chama a função para imprimir a matriz com a soma de cada linha
    PrintMatrixWithRowSum(a, SIZE, COLUMNS);
    
    return 0;
}
7.7
#include <stdio.h>
#define SIZE 12       // Define o tamanho do array
#define COLUMNS 3     // Define o número de colunas da matriz

// Função para ler os números no array
void ReadArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite o número %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

// Função para imprimir a matriz com a soma de cada linha e coluna
void PrintMatrixWithRowAndColumnSum(int arr[], int size, int columns) {
    int col_sum[COLUMNS] = {0};  // Inicializa as somas das colunas com zero

    // Imprime a matriz e calcula a soma das linhas e colunas
    for (int i = 0; i < size; i++) {
        int row_sum = 0;  // Inicializa a soma da linha
        
        // Imprime os elementos da linha
        for (int j = 0; j < columns; j++) {
            printf("%d\t", arr[i + j]);
            row_sum += arr[i + j];  // Soma o valor ao total da linha
            col_sum[j] += arr[i + j];  // Soma o valor ao total da coluna
        }
        
        printf("| Soma da linha: %d\n", row_sum);  // Imprime a soma da linha
        i += (columns - 1);  // Avança para a próxima linha
    }
    
    // Imprime a soma das colunas
    printf("\nSoma das colunas: ");
    for (int j = 0; j < columns; j++) {
        printf("%d\t", col_sum[j]);
    }
    printf("\n");
}

int main(void) {
    int a[SIZE];  // Declaração do array de tamanho SIZE
    
    // Chama a função para ler os números no array
    ReadArray(a, SIZE);
    
    // Chama a função para imprimir a matriz com a soma de cada linha e coluna
    PrintMatrixWithRowAndColumnSum(a, SIZE, COLUMNS);
    
    return 0;
}
7.8
#include <stdio.h>
#define MAX 100

// Função para ler o número de elementos do array (no intervalo [0, 100])
int ReadSize(int min, int max) {
    int size;
    do {
        printf("Digite o número de elementos (entre %d e %d): ", min, max);
        scanf("%d", &size);
        if (size < min || size > max) {
            printf("Número inválido. Tente novamente.\n");
        }
    } while (size < min || size > max);  // Garante que o valor está dentro do intervalo
    return size;
}

// Função para ler os valores do array
void ReadArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Digite o valor para o elemento %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

// Função para imprimir os valores do array
void PrintArray(int arr[], int size) {
    printf("Valores no array:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(void) {
    int row[MAX];  // Declaração do array de inteiros com tamanho máximo 100
    int size;      // Variável para armazenar o número de elementos efetivos
    
    // Chama a função para ler o número de elementos no array
    size = ReadSize(0, MAX);
    
    // Chama a função para ler os valores no array
    ReadArray(row, size);
    
    // Chama a função para imprimir os valores do array
    PrintArray(row, size);
    
    return 0;
}
7.9
#include <stdio.h>
#define MAX 100

// Função para ler os inteiros até que 999 seja inserido
int ReadArray(int arr[]) {
    int num, size = 0;
    printf("Digite os números inteiros (999 para terminar): \n");
    while (1) {
        scanf("%d", &num);
        if (num == 999) {
            break;  // Encerra a leitura se o número for 999
        }
        if (size < MAX) {
            arr[size++] = num;  // Armazena o número no array
        } else {
            printf("Capacidade máxima do array atingida!\n");
            break;
        }
    }
    return size;
}

// Função para imprimir os valores do array
void PrintArray(int arr[], int size) {
    printf("Valores no array:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(void) {
    int row[MAX];
    int size;
    
    // Chama a função para ler os valores do array
    size = ReadArray(row);
    
    // Chama a função para imprimir os valores do array
    PrintArray(row, size);
    
    return 0;
}
7.10
#include <stdio.h>
#define MAX 100

// Função para ler os inteiros até que 999 seja inserido
int ReadArray(int arr[]) {
    int num, size = 0;
    printf("Digite os números inteiros (999 para terminar): \n");
    while (1) {
        scanf("%d", &num);
        if (num == 999) {
            break;
        }
        if (size < MAX) {
            arr[size++] = num;
        } else {
            printf("Capacidade máxima do array atingida!\n");
            break;
        }
    }
    return size;
}

// Função para imprimir os valores do array
void PrintArray(int arr[], int size) {
    printf("Valores no array:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Função para calcular a média dos valores
double CalcMean(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];  // Soma todos os elementos
    }
    return (double)sum / size;  // Retorna a média
}

int main(void) {
    int row[MAX];
    int size;
    double media;
    
    // Chama a função para ler os valores do array
    size = ReadArray(row);
    
    // Chama a função para imprimir os valores do array
    PrintArray(row, size);
    
    // Calcula e imprime a média dos valores
    media = CalcMean(row, size);
    printf("A média dos valores inseridos é: %.2f\n", media);
    
    return 0;
}
7.11
#include <stdio.h>
#define MAX 100

// Função para ler os inteiros até que 999 seja inserido
int ReadArray(int arr[]) {
    int num, size = 0;
    printf("Digite os números inteiros (999 para terminar): \n");
    while (1) {
        scanf("%d", &num);
        if (num == 999) {
            break;
        }
        if (size < MAX) {
            arr[size++] = num;
        } else {
            printf("Capacidade máxima do array atingida!\n");
            break;
        }
    }
    return size;
}

// Função para imprimir os valores do array
void PrintArray(int arr[], int size) {
    printf("Valores no array:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Função para calcular a média dos valores
double CalcMean(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return (double)sum / size;
}

// Função para encontrar o valor máximo no array
int FindMax(int arr[], int size) {
    int max = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

int main(void) {
    int row[MAX];
    int size;
    double media;
    int max;
    
    // Chama a função para ler os valores do array
    size = ReadArray(row);
    
    // Chama a função para imprimir os valores do array
    PrintArray(row, size);
    
    // Calcula e imprime a média dos valores
    media = CalcMean(row, size);
    printf("A média dos valores inseridos é: %.2f\n", media);
    
    // Encontra e imprime o valor máximo
    max = FindMax(row, size);
    printf("O valor máximo inserido é: %d\n", max);
    
    return 0;
}
7.12
#include <stdio.h>

#define MAX 100

// Função para ler uma lista ordenada de números inteiros
void ReadArray(int arr[], int *size) {
    int num;
    *size = 0;
    printf("Digite a lista ordenada (999 para terminar): ");
    while (1) {
        scanf("%d", &num);
        if (num == 999) break;
        arr[(*size)++] = num;
    }
}

// Função para mesclar duas listas ordenadas em uma lista final
void MergeArrays(int arr1[], int size1, int arr2[], int size2, int merged[]) {
    int i = 0, j = 0, k = 0;
    
    // Mescla enquanto houver elementos nas duas listas
    while (i < size1 && j < size2) {
        if (arr1[i] < arr2[j]) {
            merged[k++] = arr1[i++];
        } else {
            merged[k++] = arr2[j++];
        }
    }
    
    // Copia os elementos restantes da primeira lista
    while (i < size1) {
        merged[k++] = arr1[i++];
    }
    
    // Copia os elementos restantes da segunda lista
    while (j < size2) {
        merged[k++] = arr2[j++];
    }
}

// Função para imprimir o array mesclado
void PrintArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(void) {
    int arr1[MAX], arr2[MAX], merged[MAX];
    int size1, size2, size_merged;
    
    // Ler as duas listas ordenadas
    ReadArray(arr1, &size1);
    ReadArray(arr2, &size2);
    
    // Mesclar as listas
    MergeArrays(arr1, size1, arr2, size2, merged);
    size_merged = size1 + size2;
    
    // Imprimir a lista mesclada
    printf("A lista mesclada é: ");
    PrintArray(merged, size_merged);
    
    return 0;
}
7.13
#include <stdio.h>

#define MAX 100

// Função para ler os valores do array até inserir 999
int ReadArray(int arr[]) {
    int num, size = 0;
    printf("Digite os números inteiros (999 para terminar): \n");
    while (1) {
        scanf("%d", &num);
        if (num == 999) break;
        if (size < MAX) arr[size++] = num;
    }
    return size;
}

// Função para imprimir o array
void PrintArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Função para encontrar e trocar o maior e o menor valor
void SwapMaxMin(int arr[], int size) {
    int max = arr[0], min = arr[0];
    int maxIndex = 0, minIndex = 0;

    for (int i = 1; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
            maxIndex = i;
        }
        if (arr[i] < min) {
            min = arr[i];
            minIndex = i;
        }
    }
    
    // Troca os valores
    int temp = arr[maxIndex];
    arr[maxIndex] = arr[minIndex];
    arr[minIndex] = temp;
}

int main(void) {
    int row[MAX];
    int size;
    
    // Ler os valores do array
    size = ReadArray(row);
    
    // Trocar maior e menor valor
    SwapMaxMin(row, size);
    
    // Imprimir o array modificado
    printf("Array após troca do maior e menor valor: ");
    PrintArray(row, size);
    
    return 0;
}
7.14
#include <stdio.h>
#define MAX 20

// Função para ler 20 números
void ReadArray(int arr[]) {
    printf("Digite uma lista de 20 números:\n");
    for (int i = 0; i < MAX; i++) {
        scanf("%d", &arr[i]);
    }
}

// Função para remover duplicados do array
int RemoveDuplicates(int arr[], int size) {
    int newSize = 0;
    
    for (int i = 0; i < size; i++) {
        int duplicate = 0;
        for (int j = 0; j < newSize; j++) {
            if (arr[i] == arr[j]) {
                duplicate = 1;
                break;
            }
        }
        if (!duplicate) {
            arr[newSize++] = arr[i];
        }
    }
    
    return newSize;
}

// Função para imprimir o array
void PrintArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main(void) {
    int arr[MAX];
    int newSize;
    
    // Ler os 20 números
    ReadArray(arr);
    
    // Remover duplicados
    newSize = RemoveDuplicates(arr, MAX);
    
    // Imprimir o array sem duplicados
    printf("Os números armazenados no array limpo são:\n");
    PrintArray(arr, newSize);
    
    return 0;
}
7.15
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TOTAL_NUMS 6
#define MAX_VALUE 42

// Função para verificar se um número já foi gerado
int alreadyGenerated(int arr[], int size, int num) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == num) {
            return 1;  // Número já existe no array
        }
    }
    return 0;  // Número não existe no array
}

int main(void) {
    int nums[TOTAL_NUMS];
    int count = 0;
    
    // Inicializar o gerador de números aleatórios
    srand(time(NULL));
    
    // Gerar 6 números diferentes
    while (count < TOTAL_NUMS) {
        int num = rand() % MAX_VALUE + 1;  // Gera número entre 1 e 42
        
        if (!alreadyGenerated(nums, count, num)) {
            nums[count++] = num;
        }
    }
    
    // Imprimir os números gerados
    printf("Os números aleatórios gerados são:\n");
    for (int i = 0; i < TOTAL_NUMS; i++) {
        printf("%d ", nums[i]);
    }
    printf("\n");
    
    return 0;
}
7.16
#include <stdio.h>

#define MAX_SIZE 10

// Função para ler uma lista de inteiros
int ReadList(int arr[]) {
    int num, size = 0;
    printf("Digite uma lista de no máximo 10 inteiros (pare com 0):\n");
    
    while (size < MAX_SIZE) {
        scanf("%d", &num);
        if (num == 0) break;
        arr[size++] = num;
    }
    
    return size;
}

// Função para verificar se duas listas contêm números iguais
int ContainsEqualNumbers(int arr1[], int size1, int arr2[], int size2) {
    for (int i = 0; i < size1; i++) {
        for (int j = 0; j < size2; j++) {
            if (arr1[i] == arr2[j]) {
                return 1;  // Números iguais encontrados
            }
        }
    }
    return 0;  // Nenhum número igual encontrado
}

int main(void) {
    int list1[MAX_SIZE], list2[MAX_SIZE];
    int size1, size2;
    
    // Ler as duas listas
    size1 = ReadList(list1);
    size2 = ReadList(list2);
    
    // Verificar se ambas as listas contêm números iguais
    if (ContainsEqualNumbers(list1, size1, list2, size2)) {
        printf("As listas contêm números iguais.\n");
    } else {
        printf("As listas NÃO contêm números iguais.\n");
    }
    
    return 0;
}
7.17
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define NUM_ROLLS 400
#define NUM_OUTCOMES 11 // Valores de 2 a 12

// Função para simular lançamentos de dados
void SimulateRolls(int outcomes[]) {
    for (int i = 0; i < NUM_ROLLS; i++) {
        int die1 = rand() % 6 + 1; // Lança o primeiro dado
        int die2 = rand() % 6 + 1; // Lança o segundo dado
        int sum = die1 + die2;     // Soma dos dois dados
        outcomes[sum - 2]++;       // Incrementa a contagem para o resultado
    }
}

// Função para imprimir ocorrências
void PrintOccurrences(int outcomes[]) {
    printf("Resultado\tOcorrências\n");
    for (int i = 0; i < NUM_OUTCOMES; i++) {
        printf("%d\t\t%d\n", i + 2, outcomes[i]);
    }
}

// Função para desenhar uma linha de barras horizontais
void DrawLine(int count) {
    for (int i = 0; i < count; i++) {
        printf("#");
    }
    printf("\n");
}

// Função para imprimir gráfico de barras horizontal
void PrintBarChart(int outcomes[]) {
    printf("Gráfico de Barras Horizontal\n");
    for (int i = 0; i < NUM_OUTCOMES; i++) {
        printf("%d: ", i + 2);
        DrawLine(outcomes[i] / 10); // Ajuste a escala aqui para gráficos mais compactos
    }
}

int main(void) {
    int outcomes[NUM_OUTCOMES] = {0};
    
    // Inicializa o gerador de números aleatórios
    srand(time(NULL));
    
    // Simula os lançamentos de dados
    SimulateRolls(outcomes);
    
    // Imprime as ocorrências
    PrintOccurrences(outcomes);
    
    // Imprime o gráfico de barras horizontal
    PrintBarChart(outcomes);
    
    return 0;
}
//
